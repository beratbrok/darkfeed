#pragma once
#include <flatbuffers/flatbuffers.h>
#include "darkfeed/types/exchanges.hpp"
#include "timestamp.hpp"
#include "darkfeed/types/event.hpp"
#include "darkfeed/types/price.hpp"
#include "darkfeed/generated/flatbuffers/quote_conditions_generated.h"
#include "darkfeed/generated/flatbuffers/option_quote_generated.h"

namespace darkfeed
{
/// @defgroup quotes
/// @brief Quotations for securities generated by orders, market makers, or from a consolidated feed
/// @ingroup events

/// @brief The condition with which the quote was sent by the exchange
/// @ingroup quotes
typedef schemas::fb::QuoteCondition QuoteCondition;
/// @brief the type of option underlying this security
/// @ingroup quotes
typedef schemas::fb::OptionType OptionType;


/// @brief Base top of book quote class
/// @ingroup quotes
struct Quote : Event {
    Price bid;        ///< bid in cents
    Price ask;        ///< ask in cents
    std::uint32_t bid_size;   ///< size of bid quoted (in round lots)
    std::uint32_t ask_size;   ///< size of ask quoted (in round lots)
    QuoteCondition condition;
    /// @brief Checks whether this quote is eligible to set the NBBO
    /// @return True if it is eligible to set the NBBO. False otherwise
    bool sets_nbbo() const;
    /// @brief Retrieves quote condition as a string
    /// @return text corresponding to quote condition
    const char* condition_str() const;
};


/// @brief Top of book quote for an option
/// @ingroup quotes
struct OptionQuote : Quote {
    OptionType option_type; ///< type of option
    Price strike; ///< strike price
    Timestamp expiration; ///< expiration date
};

/// @brief A hybrid event corresponding of the best bid and offer quotes from the SIP
/// @ingroup quotes
struct NBBO : Event {
    Exchange best_bid_exg;          ///< reporting exchange of best bid
    Exchange best_ask_exg;          ///< reporting exchange of best ask
    Price best_bid;        ///< best bid price
    Price best_ask;        ///< best ask price
    std::uint32_t best_bid_size;   ///< size of bid quoted in round lots
    std::uint32_t best_ask_size;   ///< size of ask quoted in round lots
    QuoteCondition best_bid_condition; ///< The condition under which the best bid quote was made
    QuoteCondition best_ask_condition; ///< The condition under which the best ask quote was made
    /// @brief Returns best bid quote condition as a string
    /// @return best bid quote condition text
    const char* best_bid_condition_str() const;
    /// @brief Returns best ask quote condition as a string
    /// @return best ask quote condition text
    const char* best_ask_condition_str() const;
};

} // darkfeed