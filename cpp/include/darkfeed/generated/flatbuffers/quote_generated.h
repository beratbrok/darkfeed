// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_QUOTE_DARKFEED_SCHEMAS_FB_H_
#define FLATBUFFERS_GENERATED_QUOTE_DARKFEED_SCHEMAS_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "currency_generated.h"
#include "exchanges_generated.h"
#include "price_generated.h"
#include "quote_conditions_generated.h"
#include "symbol_generated.h"
#include "timestamps_generated.h"

namespace darkfeed {
namespace schemas {
namespace fb
{

struct EquityQuote;


struct EquityQuote FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    enum {
        VT_SEQ_NUM = 4,
        VT_SYMBOL = 6,
        VT_REPORTING_EXG = 8,
        VT_TS = 10,
        VT_BID = 12,
        VT_ASK = 14,
        VT_BID_SIZE = 16,
        VT_ASK_SIZE = 18,
        VT_CONDITION = 20
    };

    uint64_t seq_num() const
    {
        return GetField<uint64_t>(VT_SEQ_NUM, 0);
    }

    const darkfeed::schemas::fb::Symbol *symbol() const
    {
        return GetPointer<const darkfeed::schemas::fb::Symbol *>(VT_SYMBOL);
    }

    darkfeed::schemas::fb::MIC reporting_exg() const
    {
        return static_cast<darkfeed::schemas::fb::MIC>(GetField<uint8_t>(VT_REPORTING_EXG, 0));
    }

    const darkfeed::schemas::fb::Timestamp *ts() const
    {
        return GetStruct<const darkfeed::schemas::fb::Timestamp *>(VT_TS);
    }

    const darkfeed::schemas::fb::Price *bid() const
    {
        return GetStruct<const darkfeed::schemas::fb::Price *>(VT_BID);
    }

    const darkfeed::schemas::fb::Price *ask() const
    {
        return GetStruct<const darkfeed::schemas::fb::Price *>(VT_ASK);
    }

    uint32_t bid_size() const
    {
        return GetField<uint32_t>(VT_BID_SIZE, 0);
    }

    uint32_t ask_size() const
    {
        return GetField<uint32_t>(VT_ASK_SIZE, 0);
    }

    darkfeed::schemas::fb::QuoteCondition condition() const
    {
        return static_cast<darkfeed::schemas::fb::QuoteCondition>(GetField<uint8_t>(VT_CONDITION, 0));
    }

    bool Verify(flatbuffers::Verifier &verifier) const {
        return VerifyTableStart(verifier) &&
               VerifyField<uint64_t>(verifier, VT_SEQ_NUM) &&
               VerifyField<flatbuffers::uoffset_t>(verifier, VT_SYMBOL) &&
               verifier.VerifyTable(symbol()) &&
               VerifyField<uint8_t>(verifier, VT_REPORTING_EXG) &&
               VerifyField<darkfeed::schemas::fb::Timestamp>(verifier, VT_TS) &&
               VerifyField<darkfeed::schemas::fb::Price>(verifier, VT_BID) &&
               VerifyField<darkfeed::schemas::fb::Price>(verifier, VT_ASK) &&
               VerifyField<uint32_t>(verifier, VT_BID_SIZE) &&
               VerifyField<uint32_t>(verifier, VT_ASK_SIZE) &&
               VerifyField<uint8_t>(verifier, VT_CONDITION) &&
               verifier.EndTable();
    }
};


struct EquityQuoteBuilder {
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;

    void add_seq_num(uint64_t seq_num)
    {
        fbb_.AddElement<uint64_t>(EquityQuote::VT_SEQ_NUM, seq_num, 0);
    }

    void add_symbol(flatbuffers::Offset<darkfeed::schemas::fb::Symbol> symbol)
    {
        fbb_.AddOffset(EquityQuote::VT_SYMBOL, symbol);
    }

    void add_reporting_exg(darkfeed::schemas::fb::MIC reporting_exg)
    {
        fbb_.AddElement<uint8_t>(EquityQuote::VT_REPORTING_EXG, static_cast<uint8_t>(reporting_exg), 0);
    }

    void add_ts(const darkfeed::schemas::fb::Timestamp *ts)
    {
        fbb_.AddStruct(EquityQuote::VT_TS, ts);
    }

    void add_bid(const darkfeed::schemas::fb::Price *bid)
    {
        fbb_.AddStruct(EquityQuote::VT_BID, bid);
    }

    void add_ask(const darkfeed::schemas::fb::Price *ask)
    {
        fbb_.AddStruct(EquityQuote::VT_ASK, ask);
    }

    void add_bid_size(uint32_t bid_size)
    {
        fbb_.AddElement<uint32_t>(EquityQuote::VT_BID_SIZE, bid_size, 0);
    }

    void add_ask_size(uint32_t ask_size)
    {
        fbb_.AddElement<uint32_t>(EquityQuote::VT_ASK_SIZE, ask_size, 0);
    }

    void add_condition(darkfeed::schemas::fb::QuoteCondition condition)
    {
        fbb_.AddElement<uint8_t>(EquityQuote::VT_CONDITION, static_cast<uint8_t>(condition), 0);
    }

    EquityQuoteBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb)
    {
        start_ = fbb_.StartTable();
    }

    EquityQuoteBuilder &operator=(const EquityQuoteBuilder &);

    flatbuffers::Offset<EquityQuote> Finish() {
        const auto end = fbb_.EndTable(start_, 9);
        auto o = flatbuffers::Offset<EquityQuote>(end);
        return o;
    }
};


inline flatbuffers::Offset<EquityQuote> CreateEquityQuote(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t seq_num = 0,
    flatbuffers::Offset<darkfeed::schemas::fb::Symbol> symbol = 0,
    darkfeed::schemas::fb::MIC reporting_exg = darkfeed::schemas::fb::MIC::NONE,
    const darkfeed::schemas::fb::Timestamp *ts = 0,
    const darkfeed::schemas::fb::Price *bid = 0,
    const darkfeed::schemas::fb::Price *ask = 0,
    uint32_t bid_size = 0,
    uint32_t ask_size = 0,
    darkfeed::schemas::fb::QuoteCondition condition = darkfeed::schemas::fb::QuoteCondition::none)
{
    EquityQuoteBuilder builder_(_fbb);
    builder_.add_seq_num(seq_num);
    builder_.add_ask_size(ask_size);
    builder_.add_bid_size(bid_size);
    builder_.add_ask(ask);
    builder_.add_bid(bid);
    builder_.add_ts(ts);
    builder_.add_symbol(symbol);
    builder_.add_condition(condition);
    builder_.add_reporting_exg(reporting_exg);
    return builder_.Finish();
}

inline const darkfeed::schemas::fb::EquityQuote *GetEquityQuote(const void *buf)
{
    return flatbuffers::GetRoot<darkfeed::schemas::fb::EquityQuote>(buf);
}

inline bool VerifyEquityQuoteBuffer(
    flatbuffers::Verifier &verifier)
{
    return verifier.VerifyBuffer<darkfeed::schemas::fb::EquityQuote>(nullptr);
}

inline void FinishEquityQuoteBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<darkfeed::schemas::fb::EquityQuote> root)
{
    fbb.Finish(root);
}

}  // namespace fb
}  // namespace schemas
}  // namespace darkfeed

#endif  // FLATBUFFERS_GENERATED_QUOTE_DARKFEED_SCHEMAS_FB_H_
