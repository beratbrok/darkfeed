// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SYMBOL_DARKFEED_SCHEMAS_FB_H_
#define FLATBUFFERS_GENERATED_SYMBOL_DARKFEED_SCHEMAS_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "exchanges_generated.h"

namespace darkfeed
{
namespace schemas
{
namespace fb
{

struct Symbol;

enum class IssueType : uint8_t {
    normal = 0,
    preferred = 1,
    warrant = 2,
    right = 3,
    unit = 4,
    non_voting = 5,
    mini = 6,
    when_issued = 7,
    other = 8,
    MIN = normal,
    MAX = other
};

inline const char **EnumNamesIssueType()
{
    static const char *names[] = {
        "normal",
        "preferred",
        "warrant",
        "right",
        "unit",
        "non_voting",
        "mini",
        "when_issued",
        "other",
        nullptr
    };
    return names;
}

inline const char *EnumNameIssueType(IssueType e)
{
    const size_t index = static_cast<int>(e);
    return EnumNamesIssueType()[index];
}

struct Symbol FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    enum {
        VT_ROOT = 4,
        VT_LISTING_EXG = 6,
        VT_ISSUE_TYPE = 8,
        VT_SERIES = 10
    };

    const flatbuffers::String *root() const
    {
        return GetPointer<const flatbuffers::String *>(VT_ROOT);
    }

    darkfeed::schemas::fb::MIC listing_exg() const
    {
        return static_cast<darkfeed::schemas::fb::MIC>(GetField<uint8_t>(VT_LISTING_EXG, 0));
    }

    IssueType issue_type() const
    {
        return static_cast<IssueType>(GetField<uint8_t>(VT_ISSUE_TYPE, 0));
    }

    int8_t series() const
    {
        return GetField<int8_t>(VT_SERIES, 0);
    }

    bool Verify(flatbuffers::Verifier &verifier) const
    {
        return VerifyTableStart(verifier) &&
               VerifyField<flatbuffers::uoffset_t>(verifier, VT_ROOT) &&
               verifier.Verify(root()) &&
               VerifyField<uint8_t>(verifier, VT_LISTING_EXG) &&
               VerifyField<uint8_t>(verifier, VT_ISSUE_TYPE) &&
               VerifyField<int8_t>(verifier, VT_SERIES) &&
               verifier.EndTable();
    }
};

struct SymbolBuilder {
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;

    void add_root(flatbuffers::Offset<flatbuffers::String> root)
    {
        fbb_.AddOffset(Symbol::VT_ROOT, root);
    }

    void add_listing_exg(darkfeed::schemas::fb::MIC listing_exg)
    {
        fbb_.AddElement<uint8_t>(Symbol::VT_LISTING_EXG, static_cast<uint8_t>(listing_exg), 0);
    }

    void add_issue_type(IssueType issue_type)
    {
        fbb_.AddElement<uint8_t>(Symbol::VT_ISSUE_TYPE, static_cast<uint8_t>(issue_type), 0);
    }

    void add_series(int8_t series)
    {
        fbb_.AddElement<int8_t>(Symbol::VT_SERIES, series, 0);
    }

    SymbolBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb)
    {
        start_ = fbb_.StartTable();
    }

    SymbolBuilder &operator=(const SymbolBuilder &);

    flatbuffers::Offset<Symbol> Finish()
    {
        const auto end = fbb_.EndTable(start_, 4);
        auto o = flatbuffers::Offset<Symbol>(end);
        return o;
    }
};

inline flatbuffers::Offset<Symbol> CreateSymbol(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> root = 0,
    darkfeed::schemas::fb::MIC listing_exg = darkfeed::schemas::fb::MIC::NONE,
    IssueType issue_type = IssueType::normal,
    int8_t series = 0)
{
    SymbolBuilder builder_(_fbb);
    builder_.add_root(root);
    builder_.add_series(series);
    builder_.add_issue_type(issue_type);
    builder_.add_listing_exg(listing_exg);
    return builder_.Finish();
}

inline flatbuffers::Offset<Symbol> CreateSymbolDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *root = nullptr,
    darkfeed::schemas::fb::MIC listing_exg = darkfeed::schemas::fb::MIC::NONE,
    IssueType issue_type = IssueType::normal,
    int8_t series = 0)
{
    return darkfeed::schemas::fb::CreateSymbol(
        _fbb,
        root ? _fbb.CreateString(root) : 0,
        listing_exg,
        issue_type,
        series);
}

}  // namespace fb
}  // namespace schemas
}  // namespace darkfeed

#endif  // FLATBUFFERS_GENERATED_SYMBOL_DARKFEED_SCHEMAS_FB_H_
