// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TIMESTAMPS_DARKFEED_SCHEMAS_FB_H_
#define FLATBUFFERS_GENERATED_TIMESTAMPS_DARKFEED_SCHEMAS_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace darkfeed
{
namespace schemas
{
namespace fb
{

struct Timestamp;

MANUALLY_ALIGNED_STRUCT(4) Timestamp FLATBUFFERS_FINAL_CLASS {
 private:
    uint32_t unix_;
    uint32_t ns_;
    int8_t offset_;
    uint8_t dst_;
    int16_t padding0__;

 public:
    Timestamp()
    {
        memset(this, 0, sizeof(Timestamp));
    }
    Timestamp(const Timestamp &_o)
    {
        memcpy(this, &_o, sizeof(Timestamp));
    }
    Timestamp(uint32_t _unix, uint32_t _ns, int8_t _offset, bool _dst)
        : unix_(flatbuffers::EndianScalar(_unix)),
          ns_(flatbuffers::EndianScalar(_ns)),
          offset_(flatbuffers::EndianScalar(_offset)),
          dst_(flatbuffers::EndianScalar(static_cast<uint8_t>(_dst))),
          padding0__(0)
    {
        (void) padding0__;
    }
    uint32_t unix() const
    {
        return flatbuffers::EndianScalar(unix_);
    }
    uint32_t ns() const
    {
        return flatbuffers::EndianScalar(ns_);
    }
    int8_t offset() const
    {
        return flatbuffers::EndianScalar(offset_);
    }
    bool dst() const
    {
        return flatbuffers::EndianScalar(dst_) != 0;
    }
};
STRUCT_END(Timestamp, 12);

}  // namespace fb
}  // namespace schemas
}  // namespace darkfeed

#endif  // FLATBUFFERS_GENERATED_TIMESTAMPS_DARKFEED_SCHEMAS_FB_H_
