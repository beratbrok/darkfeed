// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PRICE_DARKFEED_SCHEMAS_FB_H_
#define FLATBUFFERS_GENERATED_PRICE_DARKFEED_SCHEMAS_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "currency_generated.h"

namespace darkfeed {
namespace schemas {
namespace fb
{

struct Price;

MANUALLY_ALIGNED_STRUCT(4) Price FLATBUFFERS_FINAL_CLASS {
 private:
    uint32_t price_;
    int8_t precision_;
    uint8_t tick_size_;
    uint8_t currency_;
    int8_t padding0__;

 public:
    Price()
    {
        memset(this, 0, sizeof(Price));
    }
    Price(const Price &_o)
    {
        memcpy(this, &_o, sizeof(Price));
    }
    Price(uint32_t _price, int8_t _precision, uint8_t _tick_size, darkfeed::schemas::fb::Currency _currency)
        : price_(flatbuffers::EndianScalar(_price)),
          precision_(flatbuffers::EndianScalar(_precision)),
          tick_size_(flatbuffers::EndianScalar(_tick_size)),
          currency_(flatbuffers::EndianScalar(static_cast<uint8_t>(_currency))),
          padding0__(0)
    {
        (void) padding0__;
    }
    ///< price in "precision" units
    uint32_t price() const
    {
        return flatbuffers::EndianScalar(price_);
    }
    ///< power of 10 representing magnitude of price. Eg; -2 for cents
    int8_t precision() const
    {
        return flatbuffers::EndianScalar(precision_);
    }
    ///< minimum quoted tick size in "precision" units. Eg; precision of -2 and precision_scalar of 5 means "price" is quoted in cents with a minimum tick of 5 cents. price must be a multiple of tick_size
    uint8_t tick_size() const
    {
        return flatbuffers::EndianScalar(tick_size_);
    }
    ///< base currency for this price
    darkfeed::schemas::fb::Currency currency() const
    {
        return static_cast<darkfeed::schemas::fb::Currency>(flatbuffers::EndianScalar(currency_));
    }
};
STRUCT_END(Price, 8);

}  // namespace fb
}  // namespace schemas
}  // namespace darkfeed

#endif  // FLATBUFFERS_GENERATED_PRICE_DARKFEED_SCHEMAS_FB_H_
