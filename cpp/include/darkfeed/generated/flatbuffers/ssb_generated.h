// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SSB_DARKFEED_SCHEMAS_FB_H_
#define FLATBUFFERS_GENERATED_SSB_DARKFEED_SCHEMAS_FB_H_

#include "flatbuffers/flatbuffers.h"

#include "exchanges_generated.h"
#include "halt_generated.h"
#include "symbol_generated.h"
#include "timestamps_generated.h"

namespace darkfeed
{
namespace schemas
{
namespace fb
{

struct SecondState;

struct SSBEntry;

struct SSB;

MANUALLY_ALIGNED_STRUCT(4) SecondState FLATBUFFERS_FINAL_CLASS {
 private:
    darkfeed::schemas::fb::Timestamp ts_;
    uint32_t bid_;
    uint32_t ask_;
    uint32_t last_;
    uint32_t low_;
    uint32_t high_;
    uint32_t vol_;
    uint32_t t_vol_;
    uint8_t halt_;
    int8_t padding0__; int16_t padding1__;

 public:
    SecondState()
    {
        memset(this, 0, sizeof(SecondState));
    }
    SecondState(const SecondState &_o)
    {
        memcpy(this, &_o, sizeof(SecondState));
    }
    SecondState(const darkfeed::schemas::fb::Timestamp &_ts, uint32_t _bid, uint32_t _ask, uint32_t _last, uint32_t _low, uint32_t _high, uint32_t _vol, uint32_t _t_vol, darkfeed::schemas::fb::HaltType _halt)
        : ts_(_ts),
          bid_(flatbuffers::EndianScalar(_bid)),
          ask_(flatbuffers::EndianScalar(_ask)),
          last_(flatbuffers::EndianScalar(_last)),
          low_(flatbuffers::EndianScalar(_low)),
          high_(flatbuffers::EndianScalar(_high)),
          vol_(flatbuffers::EndianScalar(_vol)),
          t_vol_(flatbuffers::EndianScalar(_t_vol)),
          halt_(flatbuffers::EndianScalar(static_cast<uint8_t>(_halt))),
          padding0__(0),
          padding1__(0)
    {
        (void) padding0__;
        (void) padding1__;
    }
    const darkfeed::schemas::fb::Timestamp &ts() const
    {
        return ts_;
    }
    uint32_t bid() const
    {
        return flatbuffers::EndianScalar(bid_);
    }
    uint32_t ask() const
    {
        return flatbuffers::EndianScalar(ask_);
    }
    uint32_t last() const
    {
        return flatbuffers::EndianScalar(last_);
    }
    uint32_t low() const
    {
        return flatbuffers::EndianScalar(low_);
    }
    uint32_t high() const
    {
        return flatbuffers::EndianScalar(high_);
    }
    uint32_t vol() const
    {
        return flatbuffers::EndianScalar(vol_);
    }
    uint32_t t_vol() const
    {
        return flatbuffers::EndianScalar(t_vol_);
    }
    darkfeed::schemas::fb::HaltType halt() const
    {
        return static_cast<darkfeed::schemas::fb::HaltType>(flatbuffers::EndianScalar(halt_));
    }
};
STRUCT_END(SecondState, 44);

struct SSBEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    enum {
        VT_SYMBOL = 4,
        VT_RAW_SYM = 6,
        VT_STATES = 8
    };

    const darkfeed::schemas::fb::Symbol *symbol() const
    {
        return GetPointer<const darkfeed::schemas::fb::Symbol *>(VT_SYMBOL);
    }

    const flatbuffers::String *raw_sym() const
    {
        return GetPointer<const flatbuffers::String *>(VT_RAW_SYM);
    }

    bool KeyCompareLessThan(const SSBEntry *o) const
    {
        return *raw_sym() < *o->raw_sym();
    }

    int KeyCompareWithValue(const char *val) const
    {
        return strcmp(raw_sym()->c_str(), val);
    }

    const flatbuffers::Vector<const SecondState *> *states() const
    {
        return GetPointer<const flatbuffers::Vector<const SecondState *> *>(VT_STATES);
    }

    bool Verify(flatbuffers::Verifier &verifier) const
    {
        return VerifyTableStart(verifier) &&
               VerifyField<flatbuffers::uoffset_t>(verifier, VT_SYMBOL) &&
               verifier.VerifyTable(symbol()) &&
               VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_RAW_SYM) &&
               verifier.Verify(raw_sym()) &&
               VerifyField<flatbuffers::uoffset_t>(verifier, VT_STATES) &&
               verifier.Verify(states()) &&
               verifier.EndTable();
    }
};

struct SSBEntryBuilder {
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;

    void add_symbol(flatbuffers::Offset<darkfeed::schemas::fb::Symbol> symbol)
    {
        fbb_.AddOffset(SSBEntry::VT_SYMBOL, symbol);
    }

    void add_raw_sym(flatbuffers::Offset<flatbuffers::String> raw_sym)
    {
        fbb_.AddOffset(SSBEntry::VT_RAW_SYM, raw_sym);
    }

    void add_states(flatbuffers::Offset<flatbuffers::Vector<const SecondState *>> states)
    {
        fbb_.AddOffset(SSBEntry::VT_STATES, states);
    }

    SSBEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb)
    {
        start_ = fbb_.StartTable();
    }

    SSBEntryBuilder &operator=(const SSBEntryBuilder &);

    flatbuffers::Offset<SSBEntry> Finish()
    {
        const auto end = fbb_.EndTable(start_, 3);
        auto o = flatbuffers::Offset<SSBEntry>(end);
        fbb_.Required(o, SSBEntry::VT_RAW_SYM);
        return o;
    }
};

inline flatbuffers::Offset<SSBEntry> CreateSSBEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<darkfeed::schemas::fb::Symbol> symbol = 0,
    flatbuffers::Offset<flatbuffers::String> raw_sym = 0,
    flatbuffers::Offset<flatbuffers::Vector<const SecondState *>> states = 0)
{
    SSBEntryBuilder builder_(_fbb);
    builder_.add_states(states);
    builder_.add_raw_sym(raw_sym);
    builder_.add_symbol(symbol);
    return builder_.Finish();
}

inline flatbuffers::Offset<SSBEntry> CreateSSBEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<darkfeed::schemas::fb::Symbol> symbol = 0,
    const char *raw_sym = nullptr,
    const std::vector<const SecondState *> *states = nullptr)
{
    return darkfeed::schemas::fb::CreateSSBEntry(
        _fbb,
        symbol,
        raw_sym ? _fbb.CreateString(raw_sym) : 0,
        states ? _fbb.CreateVector<const SecondState *>(*states) : 0);
}

struct SSB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
    enum {
        VT_ENTRIES = 4
    };

    const flatbuffers::Vector<flatbuffers::Offset<SSBEntry>> *entries() const
    {
        return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SSBEntry>> *>(VT_ENTRIES);
    }

    bool Verify(flatbuffers::Verifier &verifier) const
    {
        return VerifyTableStart(verifier) &&
               VerifyField<flatbuffers::uoffset_t>(verifier, VT_ENTRIES) &&
               verifier.Verify(entries()) &&
               verifier.VerifyVectorOfTables(entries()) &&
               verifier.EndTable();
    }
};

struct SSBBuilder {
    flatbuffers::FlatBufferBuilder &fbb_;
    flatbuffers::uoffset_t start_;

    void add_entries(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SSBEntry>>> entries)
    {
        fbb_.AddOffset(SSB::VT_ENTRIES, entries);
    }

    SSBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb)
    {
        start_ = fbb_.StartTable();
    }

    SSBBuilder &operator=(const SSBBuilder &);

    flatbuffers::Offset<SSB> Finish()
    {
        const auto end = fbb_.EndTable(start_, 1);
        auto o = flatbuffers::Offset<SSB>(end);
        return o;
    }
};

inline flatbuffers::Offset<SSB> CreateSSB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SSBEntry>>> entries = 0)
{
    SSBBuilder builder_(_fbb);
    builder_.add_entries(entries);
    return builder_.Finish();
}

inline flatbuffers::Offset<SSB> CreateSSBDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<SSBEntry>> *entries = nullptr)
{
    return darkfeed::schemas::fb::CreateSSB(
        _fbb,
        entries ? _fbb.CreateVector<flatbuffers::Offset<SSBEntry>>(*entries) : 0);
}

inline const darkfeed::schemas::fb::SSB *GetSSB(const void *buf)
{
    return flatbuffers::GetRoot<darkfeed::schemas::fb::SSB>(buf);
}

inline bool VerifySSBBuffer(
    flatbuffers::Verifier &verifier)
{
    return verifier.VerifyBuffer<darkfeed::schemas::fb::SSB>(nullptr);
}

inline void FinishSSBBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<darkfeed::schemas::fb::SSB> root)
{
    fbb.Finish(root);
}

}  // namespace fb
}  // namespace schemas
}  // namespace darkfeed

#endif  // FLATBUFFERS_GENERATED_SSB_DARKFEED_SCHEMAS_FB_H_
